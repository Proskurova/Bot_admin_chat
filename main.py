# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞—à–µ–≥–æ –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û –±–æ—Ç–∞:
# 1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à –∫–∞–Ω–∞–ª —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞;
# 2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à —á–∞—Ç —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞;
# 3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∞ (–Ω–µ –∞–Ω–æ–Ω–∏–º–Ω–æ –∏ –Ω–µ –æ—Ç –∏–º–µ–Ω–∏ —á–∞—Ç–∞!!!) –≤ –≤–∞—à —á–∞—Ç –∫–æ–º–∞–Ω–¥—É
# /block –ù–∞–∑–≤–∞–Ω–∏–µ_–∫–∞–Ω–∞–ª–∞ (–ø—Ä–∏–º–µ—Ä:
#  /block @reklama_chats);
# 4Ô∏è‚É£–ë–æ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω. –¢–µ–ø–µ—Ä—å –Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ —Å–º–æ–≥—É—Ç –≤ –Ω–µ–º –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∫–∞–Ω–∞–ª.
# –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª! –ï—Å–ª–∏ –Ω–µ—Ç - –±–æ—Ç –Ω–µ –¥–∞—Å—Ç –µ–º—É –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç.
# 5Ô∏è‚É£–î–ª—è –≤—ã–∑–æ–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
# /start [–Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞]
# 6Ô∏è‚É£–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã:
#
# 1./block [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞] - –≤–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–ª–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
# 2. /unblock [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞]- –æ—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª

import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from contextlib import suppress


import config as cfg
import markups as nav
from db import Database
from aiogram.utils.exceptions import (MessageCantBeDeleted, MessageToDeleteNotFound)


logging.basicConfig(level=logging.INFO)

bot = Bot(token=cfg.TOKEN)
dp = Dispatcher(bot)
db = Database('database.db')


async def delete_message(message: types.Message, sleep_time: int = 0):
    await asyncio.sleep(sleep_time)
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()


def check_sub_channel(chat_member):
    return chat_member['status'] != "left"


def checking_access_rights(chat_member):
    return chat_member['status'] == "administrator" or chat_member['status'] == "creator"


@dp.message_handler(commands=['start'], commands_prefix="/")
async def start(message: types.Message):
    asyncio.create_task(delete_message(message, 5))
    if message.text[7:] == "@lyuda_2_bot":
        message_answer = await message.answer("–ù–∞—à –ë–ï–°–ü–õ–ê–¢–ù–´–ô –±–æ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞", reply_markup=nav.channelMenu)
        asyncio.create_task(delete_message(message_answer, 60))
    if message.chat.id == cfg.BOT_ID:
        await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞—à–µ–≥–æ –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û –±–æ—Ç–∞:\n\
1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à –∫–∞–Ω–∞–ª —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞;\n2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à —á–∞—Ç —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞;\n\
3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∞ (–Ω–µ –∞–Ω–æ–Ω–∏–º–Ω–æ –∏ –Ω–µ –æ—Ç –∏–º–µ–Ω–∏ —á–∞—Ç–∞!!!) –≤ –≤–∞—à —á–∞—Ç –∫–æ–º–∞–Ω–¥—É \n/bblock –ù–∞–∑–≤–∞–Ω–∏–µ_–∫–∞–Ω–∞–ª–∞ (–ø—Ä–∏–º–µ—Ä:\n\
 /bblock @reklama_chats);\n4Ô∏è‚É£–ë–æ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω. –¢–µ–ø–µ—Ä—å –Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ —Å–º–æ–≥—É—Ç –≤ –Ω–µ–º –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∫–∞–Ω–∞–ª.\n\
–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª! –ï—Å–ª–∏ –Ω–µ—Ç - –±–æ—Ç –Ω–µ –¥–∞—Å—Ç –µ–º—É –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç.\n5Ô∏è‚É£–î–ª—è –≤—ã–∑–æ–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å\n\
/start @lyuda_2_bot\n6Ô∏è‚É£–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã:\n\n\
1./bblock [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞] - –≤–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–ª–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª\n2. /unbblock [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞]\
- –æ—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"
                            )


@dp.message_handler(commands=['unbblock'], commands_prefix="/")
async def unblock(message: types.Message):
    asyncio.create_task(delete_message(message, 10))
    if checking_access_rights(await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)):
        if db.chat_exists(message.chat.id):
            db.unblock_channel(int(message.chat.id))
        new_msg = await message.reply("–ë–æ—Ç –¥–µ–∞—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
        asyncio.create_task(delete_message(new_msg, 5))


@dp.message_handler(commands=['bblock'], commands_prefix="/")
async def block(message: types.Message):
    asyncio.create_task(delete_message(message, 10))
    if checking_access_rights(await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)):
        if not db.chat_exists(message.chat.id):
            db.add_chat_channel(int(message.chat.id), message.text[8:])
        else:
            db.update_channel(int(message.chat.id), message.text[8:])
        new_msg = await message.reply(f"–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {message.text[8:]}")
        asyncio.create_task(delete_message(new_msg, 10))


@dp.message_handler()
async def mess_handler(message: types.Message):
    if not db.user_exists(message.from_user.id):
        return
    else:
        if not db.mute(message.from_user.id):
            return
        else:
            if check_sub_channel(await bot.get_chat_member(chat_id=db.receive_channel_url(message.chat.id), user_id=message.from_user.id)):
                db.mute_del(message.from_user.id, 0)
            else:
                await message.delete()


@dp.chat_member_handler()
async def new_members_handler(chat_member: types.ChatMemberUpdated):
    if chat_member.old_chat_member.status == "left" and chat_member.new_chat_member.status == "member":
        if chat_member.chat.type == "supergroup" or chat_member.chat.type == "group":
            mention = f'<a href="tg://user?id={chat_member.new_chat_member.user.id}">{chat_member.new_chat_member.user.first_name}</a>'
            message_id = await bot.send_message(chat_member.chat.id, f"‚òÄÔ∏è –ü—Ä–∏–≤–µ—Ç {mention}, \n\n\
‚úÖ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –¥—Ä—É–∂–Ω—ã–π —á–∞—Çüëãüèª\n\n–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥üôèüèª\n\n–î–ª—è –±–µ—Å–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è\
–≤ —á–∞—Ç–µ, –ø–æ–¥–ø–∏—à–∏—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {db.receive_channel_url(chat_member.chat.id)}\n\n–¢–∞–∫ –∂–µ –ø—Ä–æ—Å–∏–º —Å–æ–±–ª—é–¥–∞—Ç—å \
—Ç–µ–º–∞—Ç–∏–∫—É –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏ –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—èüôèüèª‚ú® ", parse_mode="HTML")
            asyncio.create_task(delete_message(message_id, 90))
            if not db.user_exists(chat_member.new_chat_member.user.id):
                db.add_user(chat_member.new_chat_member.user.id, chat_member.new_chat_member.user.username)
            mute_min = 3600
            db.add_mute(chat_member.new_chat_member.user.id, mute_min)


if __name__ == "__main__":
    executor.start_polling(dp, allowed_updates=["chat_member", "message"], skip_updates=False)